import { EncodeObject, Registry } from "@cosmjs/proto-signing";
import { MsgBatchSendToEthClaim, MsgBatchSendToEthClaimResponse, MsgCancelSendToEth, MsgCancelSendToEthResponse, MsgConfirmBatch, MsgConfirmBatchResponse, MsgConfirmLogicCall, MsgConfirmLogicCallResponse, MsgERC20DeployedClaim, MsgERC20DeployedClaimResponse, MsgExecuteIbcAutoForwards, MsgExecuteIbcAutoForwardsResponse, MsgLogicCallExecutedClaim, MsgLogicCallExecutedClaimResponse, MsgRequestBatch, MsgRequestBatchResponse, MsgSendToCosmosClaim, MsgSendToCosmosClaimResponse, MsgSendToEth, MsgSendToEthResponse, MsgSetOrchestratorAddress, MsgSetOrchestratorAddressResponse, MsgSubmitBadSignatureEvidence, MsgSubmitBadSignatureEvidenceResponse, MsgValsetConfirm, MsgValsetConfirmResponse, MsgValsetUpdatedClaim, MsgValsetUpdatedClaimResponse } from "./msgs";
import { GravityExtension, setupGravityExtension } from "./queries";
declare const types: (string | {
    encode(_: MsgBatchSendToEthClaimResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): MsgBatchSendToEthClaimResponse;
    fromJSON(_: any): MsgBatchSendToEthClaimResponse;
    toJSON(_: MsgBatchSendToEthClaimResponse): unknown;
    fromPartial(_: Partial<MsgBatchSendToEthClaimResponse>): MsgBatchSendToEthClaimResponse;
})[][];
export declare const registry: Registry;
declare const msg: {
    msgBatchSendToEthClaim: (data: MsgBatchSendToEthClaim) => EncodeObject;
    msgBatchSendToEthClaimResponse: (data: MsgBatchSendToEthClaimResponse) => EncodeObject;
    msgCancelSendToEth: (data: MsgCancelSendToEth) => EncodeObject;
    msgCancelSendToEthResponse: (data: MsgCancelSendToEthResponse) => EncodeObject;
    msgConfirmBatch: (data: MsgConfirmBatch) => EncodeObject;
    msgConfirmBatchResponse: (data: MsgConfirmBatchResponse) => EncodeObject;
    msgConfirmLogicCall: (data: MsgConfirmLogicCall) => EncodeObject;
    msgConfirmLogicCallResponse: (data: MsgConfirmLogicCallResponse) => EncodeObject;
    msgERC20DeployedClaim: (data: MsgERC20DeployedClaim) => EncodeObject;
    msgERC20DeployedClaimResponse: (data: MsgERC20DeployedClaimResponse) => EncodeObject;
    msgExecuteIbcAutoForwards: (data: MsgExecuteIbcAutoForwards) => EncodeObject;
    msgExecuteIbcAutoForwardsResponse: (data: MsgExecuteIbcAutoForwardsResponse) => EncodeObject;
    msgLogicCallExecutedClaim: (data: MsgLogicCallExecutedClaim) => EncodeObject;
    msgLogicCallExecutedClaimResponse: (data: MsgLogicCallExecutedClaimResponse) => EncodeObject;
    msgRequestBatch: (data: MsgRequestBatch) => EncodeObject;
    msgRequestBatchResponse: (data: MsgRequestBatchResponse) => EncodeObject;
    msgSendToCosmosClaim: (data: MsgSendToCosmosClaim) => EncodeObject;
    msgSendToCosmosClaimResponse: (data: MsgSendToCosmosClaimResponse) => EncodeObject;
    msgSendToEth: (data: MsgSendToEth) => EncodeObject;
    msgSendToEthResponse: (data: MsgSendToEthResponse) => EncodeObject;
    msgSetOrchestratorAddress: (data: MsgSetOrchestratorAddress) => EncodeObject;
    msgSetOrchestratorAddressResponse: (data: MsgSetOrchestratorAddressResponse) => EncodeObject;
    msgSubmitBadSignatureEvidence: (data: MsgSubmitBadSignatureEvidence) => EncodeObject;
    msgSubmitBadSignatureEvidenceResponse: (data: MsgSubmitBadSignatureEvidenceResponse) => EncodeObject;
    msgValsetConfirm: (data: MsgValsetConfirm) => EncodeObject;
    msgValsetConfirmResponse: (data: MsgValsetConfirmResponse) => EncodeObject;
    msgValsetUpdatedClaim: (data: MsgValsetUpdatedClaim) => EncodeObject;
    msgValsetUpdatedClaimResponse: (data: MsgValsetUpdatedClaimResponse) => EncodeObject;
};
export { msg, types, GravityExtension, setupGravityExtension };
